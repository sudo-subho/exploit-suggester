from django.shortcuts import render
import subprocess
import re

def parse_script_output(output):
    cve_entries = []

    # Split the output into blocks using '[+] ' as the delimiter
    cve_blocks = re.split(r'\[\+\] ', output)

    for block in cve_blocks[1:]:  # Skip the first part as it does not contain a CVE block
        # Extract CVE ID
        cve_id_match = re.search(r'\[(CVE-\d{4}-\d+)\]', block)
        if cve_id_match:
            cve_id = cve_id_match.group(1)
            
            # Extract the first line as description
            lines = block.splitlines()
            description = lines[0].strip() if lines else "No description"
            
            # Extract Exposure
            exposure_match = re.search(r'Exposure:\s+(.+)', block)
            exposure = exposure_match.group(1) if exposure_match else "Unknown"
            
            # Extract Tags
            tags_match = re.search(r'Tags:\s+(.+)', block)
            tags = tags_match.group(1) if tags_match else "Unknown"
            
            # Extract Download URL
            download_url_match = re.search(r'Download URL:\s+(.+)', block)
            download_url = download_url_match.group(1) if download_url_match else "#"
            
            # Extract Comments
            comments_match = re.search(r'Comments:\s+(.+)', block)
            comments = comments_match.group(1) if comments_match else "None"
            
            # Extract Details URL
            details_match = re.search(r'Details:\s+(https?://\S+)', block)
            details = details_match.group(1) if details_match else "#"

            # Append parsed data to the list
            cve_entries.append({
                'cve_id': cve_id,
                'description': description,
                'exposure': exposure,
                'tags': tags,
                'download_url': download_url,
                'comments': comments,
                'details': details
            })
    
    return cve_entries

def home(request):
    if request.method == 'POST':
        searched_value = request.POST.get('searched_value', '')
        selected_option = request.POST.get('choices-single-categories', '')

        if selected_option == "--uname":
            command = ['./les.sh', '--uname', searched_value]
        elif selected_option == "--kernel":
            command = ['./les.sh', '--kernel', searched_value]
        else:
            error = "Bad Request 400"
            #print(error)
            return render(request, 'home.html', {'errors': error})

        try:
            result = subprocess.run(command, capture_output=True, text=True)
            output = result.stdout
            cve_entries = parse_script_output(output)
            cve_count = len(cve_entries)
            #print(cve_entries)
        except Exception as e:
            output = f"An error occurred: {str(e)}"
            #print(output)
            return render(request, 'home.html', {'errors': output})

        return render(request, 'home.html', {'cve_entries': cve_entries, 'cve_count': cve_count})

    return render(request, 'home.html')


def about(request):
    return render(request, 'about.html')

def contact(request):
    return render(request, 'contact.html')